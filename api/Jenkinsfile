def chart_dir
def chart
def registry_url
def docker_creds_id

pipeline {
    agent any
    stages {
        stage('Setup Pipeline') {
            steps {
              script {
                checkout scm
                chart_dir = 'api/charts/api'
                chart = readYaml (file: "${chart_dir}/Chart.yaml")  
                registry_url = "https://index.docker.io/v1/" // Docker Hub
                docker_creds_id = "docker-hub" // name of the Jenkins Credentials ID
              }
            }
        }
        stage('PR Build and Test') {
            failFast true
            parallel {
                stage('Unit Tests && SonarQube Analysis') {
                    stages {
                        stage('Unit Tests') {
                            steps {
                                echo 'unit tests'
                            }
                        }
                        stage('SonarQube Alanysis') {
                            steps {
                                echo 'sonarqube'
                            }
                        }
                    }
                }
                stage('Compile Integration Tests') {
                    steps {
                        echo 'compile integration tests'
                    }
                }
                stage('Lint Helm Charts') {
                    steps {
                        script {
                          // run helm chart linter
                            helmLint(chart_dir)

                          // run dry-run helm chart installation
                            helmDeploy(
                              dry_run       : true,
                              name          : chart.name,
                              chart_dir     : chart_dir,
                            )
                        }
                    }
                }
            }
        }
        stage('Build && Push Image') {
          steps {
            script {
              docker.withRegistry("${registry_url}", "${docker_creds_id}") {
                // Set up the container to build 
                maintainer_name = "sergiomartins8"
                container_name = "api"

                echo "Building service with docker.build(${maintainer_name}/${container_name}:${chart.version})"
                container = docker.build("${maintainer_name}/${container_name}:${chart.version}", '.')
                
                echo 'Pushing to Docker Hub'
                container.push()
              }
            }
          }
        }
        stage('Master Integration Testing && Deployment') {
            when { branch 'master' }
            stages {
                stage('Integration Testing') {
                    steps {
                        echo 'integration testing'
                    }
                }
                stage('Deployment') {
                    steps {
                        script {
                          // Deploy using Helm chart
                          helmDeploy(
                            dry_run       : false,
                            name          : chart.name,
                            chart_dir     : chart_dir,
                          )
                        }
                    }
                }
                stage('Tag build number') {
                    steps {
                        echo 'tag'
                    }
                }
            }
        }
    }
}

def kubectlTest() {
    // Test that kubectl can correctly communication with the Kubernetes API
    echo "running kubectl test"
    sh "kubectl get nodes"
}

def helmLint(String chart_dir) {
    // lint helm chart
    sh "/usr/local/bin/helm lint ${chart_dir}"
}

def helmDeploy(Map args) {
    //configure helm client and confirm tiller process is installed
    if (args.dry_run) {
        println "Running dry-run deployment"
        sh "/usr/local/bin/helm upgrade --dry-run --debug --install ${args.name} ${args.chart_dir}"
    } else {
        println "Running deployment"
        sh "/usr/local/bin/helm upgrade --install ${args.name} ${args.chart_dir}"
        echo "Application ${args.name} successfully deployed. Use helm status ${args.name} to check"
    }
}